@model WM.Northwind.Entities.Concrete.IlacTakip.Teklif

<h4>Teklif Oluştur</h4>
<hr />
@if (TempData["Message"] != null)
{
    <p>&nbsp;</p>
    <div class="alert alert-danger">
        <i class="fa fa-info-circle fa-3x"></i>
        <br />
        @TempData["Message"]
    </div>
}

    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="form-inline">
            <div class="form-group">
                <div class="input-group">
                    <i class="fa fa-search">
                        <input type="search" name="Keywords" id="searching" class="form-control" placeholder="4 harf girerek ara.." />

                    </i>
                </div>

            </div>

        </div>
        <form id="apiPostdeneme">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">

                @Html.LabelFor(model => model.IlacId, "İlaç", htmlAttributes: new { @class = "control-label col-md-4" })
                <div>
                    @Html.DropDownList("IlacId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.IlacId, "", new { @class = "text-danger" })
                </div>
            </div>

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="row">

                <div class="col-md-offset-2 col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.TeklifiVerenEczaneGrupId, "Grup", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.DropDownList("TeklifiVerenEczaneGrupId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TeklifiVerenEczaneGrupId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.HedeflenenAlim, "Hedef Alım", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.EditorFor(model => model.HedeflenenAlim, "Hedef Alım", new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.HedeflenenAlim, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.EtiketFiyati, "Etiket Fiyati", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.EditorFor(model => model.EtiketFiyati, "Etiket Fiyati", new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EtiketFiyati, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.TeklifTurId, "Teklif Türü", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.DropDownList("TeklifTurId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TeklifTurId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.YayinlamaTurId, "Yayınlama D.", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.DropDownList("YayinlamaTurId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.YayinlamaTurId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.TeklifDurumId, "Teklif Durumu", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.DropDownList("TeklifDurumId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TeklifDurumId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-md-offset-2 col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DepoFiyat, "Depo Fiyatı", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.EditorFor(model => model.DepoFiyat, "Depo Fiyatı", new { htmlAttributes = new { @class = "form-control", @id = "depofiyati" } })
                            @Html.ValidationMessageFor(model => model.DepoFiyat, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Maksimum, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.EditorFor(model => model.Maksimum, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Maksimum, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Minimum, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.EditorFor(model => model.Minimum, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Minimum, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.BaslangicTarihi, "Baş. Tarihi", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.EditorFor(model => model.BaslangicTarihi, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.BaslangicTarihi, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.BitisTarihi, "Bitiş Tarihi", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.EditorFor(model => model.BitisTarihi, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.BitisTarihi, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.IlacMiad, "Ilaç Miadı", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.EditorFor(model => model.IlacMiad, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.IlacMiad, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-md-offset-2 col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.AlimMiktari, "Alım Miktarı", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.EditorFor(model => model.AlimMiktari, new { htmlAttributes = new { @class = "form-control", @id = "alimmiktari" } })
                            @Html.ValidationMessageFor(model => model.AlimMiktari, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.MalFazlasi, "Mal Fazlası", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.EditorFor(model => model.MalFazlasi, new { htmlAttributes = new { @class = "form-control", @id = "malfazlasi" } })
                            @Html.ValidationMessageFor(model => model.MalFazlasi, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.NetFiyat, "Net Fiyat", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div>
                            @Html.EditorFor(model => model.NetFiyat, new { htmlAttributes = new { @class = "form-control", @id = "netfiyat" } })
                            @*  @Html.ValidationMessageFor(model => model.NetFiyat, "", new { @class = "text-danger" })*@
                            @*@Html.ActionLink("hesapla", null, null, new { @class = "btn btn-success", @id="hesapla" })*@

                        </div>
                    </div>
                </div>


            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Ekle" class="btn btn-primary" />
                    @Html.ActionLink("Listeye Dön", "Index", null, new { @class = "btn btn-warning" })
                </div>
            </div>
        </form>
        <div id="teklifs"></div>
    </div>

@section Styles{
    @Styles.Render("~/bundle/jqueryui/style")
}
@section Scripts{
    @Scripts.Render("~/bundle/queryui/scripts")

    <script>
        setTimeout(function () { $('.alert').fadeOut(500); }, 3000);

        $(".datepicker").datepicker({
            dateFormat: "dd.mm.yy",
            changeYear: true,
            monthNames: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
            dayNamesMin: ["Pa", "Pt", "Sl", "Ça", "Pe", "Cu", "Ct"],
            firstDay: 1,
            startDate: '01.01.2018',
        });
    </script>

    <script>
        $(function () {
            $("#apiPostdeneme").submit(function (event) {
                //alert('girdi')
                event.preventDefault();
                $.ajax({
                    url: "http://localhost:64902/api/teklifler/Ekle",
                    data: {
                         
                        AlimMiktari: 555,
                        BaslangicTarihi:'2018-09-02T06:36:29.047',
                        BitisTarihi:'2019-09-02T06:36:29.047',
                        DepoFiyat:9.8467,
                        //EczaneGrup
                        EtiketFiyati:0,
                        HedeflenenAlim:500,
                       // Ilac:true,
                        IlacId:2000,
                        IlacMiad:'2020-09-02T06:36:29.047',
                        KayitTarihi:'2018-09-02T06:36:29.047',
                        Maksimum:200,
                        MalFazlasi:100,
                        Minimum:10,
                        NetFiyat:8.2055,
                        //TeklifDurum
                        TeklifDurumId:1,
                        //TeklifTur
                        TeklifTurId:1,
                        TeklifiVerenEczaneGrupId:1,
                        //YayinlamaTur 
                        YayinlamaTurId:1,

                    },
                    type: "Post",
                    success: function () {
                        getTeklifler()
                    }
                });

            });
            function getTeklifler() {
                var html = []
                $.getJSON("http://localhost:64902/api/teklifler/Get", function (data) {
                    $.each(data, function (key, value) {
                        html.push("<label class='label label-success'>" + value.IlacAdi + "</label>");
                    });

                    $("#teklifs").empty().append(html);
                });
            }
            $('#depofiyati').on('input', function () {//id
                var alimMiktari = parseInt($('#alimmiktari').val());
                var malFazlasi = parseInt($('#malfazlasi').val());
                $("#depofiyati").val($("#depofiyati").val().replace(",", "."));
                var depoFiyati = parseFloat($('#depofiyati').val());
               
                var netfiyat = depoFiyati * alimMiktari / (alimMiktari + malFazlasi);
                netfiyat = netfiyat.toFixed(4);
              
                if (alimMiktari > 0 && malFazlasi > 0 && depoFiyati > 0) {
                    $("#netfiyat").val(netfiyat);

                }
                $("#netfiyat").val($("#netfiyat").val().replace(".", ","));
                $("#depofiyati").val($("#depofiyati").val().replace(".", ","));
              
            });
            $('#alimmiktari').on('input', function () {//id
                //alert(10)
                var alimMiktari = parseInt($('#alimmiktari').val());
                var malFazlasi = parseInt($('#malfazlasi').val());
                $("#depofiyati").val($("#depofiyati").val().replace(",", "."));
                var depoFiyati = parseFloat($('#depofiyati').val());
                var netfiyat = depoFiyati * alimMiktari / (alimMiktari + malFazlasi);
                netfiyat = netfiyat.toFixed(4);
                if (alimMiktari > 0 && malFazlasi > 0 && depoFiyati > 0) {
                    $("#netfiyat").val(netfiyat);
                }
                $("#netfiyat").val($("#netfiyat").val().replace(".", ","));
                $("#depofiyati").val($("#depofiyati").val().replace(".", ","));

            });
            $('#malfazlasi').on('input', function () {//id
                var alimMiktari = parseInt($('#alimmiktari').val());
                var malFazlasi = parseInt($('#malfazlasi').val());
                $("#depofiyati").val($("#depofiyati").val().replace(",", "."));
                var depoFiyati = parseFloat($('#depofiyati').val());
                var netfiyat = depoFiyati * alimMiktari / (alimMiktari + malFazlasi);
                netfiyat = netfiyat.toFixed(4);
                if (alimMiktari > 0 && malFazlasi > 0 && depoFiyati > 0) {
                    $("#netfiyat").val(netfiyat);
                }
                $("#netfiyat").val($("#netfiyat").val().replace(".", ","));
                $("#depofiyati").val($("#depofiyati").val().replace(".", ","));

            });
            $('#netfiyat').on('input', function () {//id
                var alimMiktari = parseInt($('#alimmiktari').val());
                var malFazlasi = parseInt($('#malfazlasi').val());
                $("#depofiyati").val($("#depofiyati").val().replace(",", "."));
                var depoFiyati = parseFloat($('#depofiyati').val());
                var netfiyat = depoFiyati * alimMiktari / (alimMiktari + malFazlasi);
                netfiyat = netfiyat.toFixed(4);
                if (alimMiktari > 0 && malFazlasi > 0 && depoFiyati > 0) {
                    $("#netfiyat").val(netfiyat);
                }
                $("#netfiyat").val($("#netfiyat").val().replace(".", ","));
                $("#depofiyati").val($("#depofiyati").val().replace(".", ","));

            });
            $('#searching').on('input', function () {
                if ($('#searching').val().length > 3) {
                    // alert($('#searching').val())
                    window.location.href = '/Kullanici/Teklifim/Create/' + $('#searching').val();
                }

            });
            $('#hesapla').click('input', function () {
                var alimMiktari = parseInt($('#alimmiktari').val());
                var malFazlasi = parseInt($('#malfazlasi').val());
                $("#depofiyati").val($("#depofiyati").val().replace(",", "."));

                var depoFiyati = parseFloat($('#depofiyati').val());
                var netfiyat = depoFiyati * alimMiktari / (alimMiktari + malFazlasi);
                alert('alimMiktari:' + alimMiktari)
                alert('malFazlasi:' + malFazlasi)
                alert('depoFiyati:' + depoFiyati)
                alert('netfiyat:' + netfiyat)
                netfiyat = netfiyat.toFixed(4);
                alert('netfiyat.fixed(4):' + netfiyat)
            });
        });
    </script>

}